// Code generated by mockery v2.42.0. DO NOT EDIT.

package cronjob

import mock "github.com/stretchr/testify/mock"

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: spec, task
func (_m *MockHandler) Handle(spec string, task func()) (*JobDefinition, error) {
	ret := _m.Called(spec, task)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *JobDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(string, func()) (*JobDefinition, error)); ok {
		return rf(spec, task)
	}
	if rf, ok := ret.Get(0).(func(string, func()) *JobDefinition); ok {
		r0 = rf(spec, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JobDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string, func()) error); ok {
		r1 = rf(spec, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
