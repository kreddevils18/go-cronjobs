// Code generated by mockery v2.42.0. DO NOT EDIT.

package cronjob

import mock "github.com/stretchr/testify/mock"

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

// Add provides a mock function with given fields: def
func (_m *MockRegistry) Add(def *JobDefinition) error {
	ret := _m.Called(def)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*JobDefinition) error); ok {
		r0 = rf(def)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *MockRegistry) Find(id string) (*JobDefinition, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *JobDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*JobDefinition, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *JobDefinition); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JobDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *MockRegistry) FindAll() ([]*JobDefinition, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*JobDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*JobDefinition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*JobDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*JobDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
